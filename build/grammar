# `frontend/parser/Parser.py`
# --------------------------->

@class Parser
@header '''
from __future__ import annotations

import tokenize
# IMPORTS
# =======>

# noinspection PyUnresolvedReferences
from typing import Optional, Any
from pegen.parser import Parser
from frontend.parser.memoizetools import (memoize, memoize_left_rec)
import frontend.parser.AST as AST

# EXPORTS
# =======>

__all__ = [
    'Parser'
]


# MAIN CONTENT
# ============>

memoize.List = AST.List
memoize_left_rec.List = AST.List

# noinspection PyRedundantParentheses
# noinspection PyUnboundLocalVariable
'''

start[AST.File]:
    | i1=packageHeader i2=importList i3=topLevelObjectList semi? &&(ENDMARKER) {
        AST.File(
            packageHeader=i1,
            importList=i2,
            declarations=i3
        )
    }

functionDeclaration[AST.FunctionDeclaration]:
    | i1=modifiers? 'fun' i2=receiverType i3=identifier '(' ')' {
        AST.FunctionDeclaration(
            modifiers=i1,
            receiverType=i2,
            identifier=i3
        )
    }

identifier[AST.Identifier]:
    | i1=simpleIdentifier i2=identifier_i2_List {
        AST.Identifier(
            attrs=AST.List(elements=list([i1])) + i2
        )
    }
identifier_i2_List:
    | i1=identifier_i2* { i1 }
identifier_i2:
    | '.' i1=(&&(simpleIdentifier)) { i1 }

simpleIdentifier[AST.TokenWrapper]:
    | i1=NAME {
        AST.TokenWrapper(
            token=i1
        )
    }

modifiers[AST.List[AST.Modifier]]:
    | DEDENT? { AST.List(elements=list()) }

packageHeader[AST.PackageHeader]:
    | 'package' i1=(&&(identifier)) &&(semi) {
        AST.PackageHeader(
            identifier=i1
        )
    }

importList[AST.List[AST.ImportHeader]]:
    | importHeader*

importHeader[AST.ImportHeader]:
    | 'import' i1=(&&(identifier)) i2=importHeader_i2 &&(semi) {
        AST.ImportHeader(
            identifier=i1,
            alias=i2
        )
    }

importHeader_i2[AST.ImportAlias | AST.Null]:
    | importAlias
    | '.' '*' { AST.ImportAlias() }
    | DEDENT? { AST.Null() }

importAlias[AST.ImportAlias]:
    | 'as' i1=(&&(simpleIdentifier)) {
        AST.ImportAlias(
            identifier=i1
        )
    }

semi[AST.TokenWrapper]:
    | NEWLINE
    | ';'

topLevelObjectList[AST.List[AST.Declaration]]:
    | i1=topLevelObject* { i1 }

topLevelObject[AST.Declaration]:
    | i1=declaration &&(semi) { i1 }

declaration[AST.Declaration]:
    | functionDeclaration

receiverType[AST.ReceiverType]:
    | parenthisedType
    | typeReference

parenthisedType[AST.ParenthisedType]:
    | '(' type ')'

typeReference:
    | userType

userType:
    | simpleUserType

type:
    | DEDENT

simpleUserType:
    | DEDENT

